from AstTree import Node

COMPILER VeKrestKrest

IGNORECASE
CHARACTERS
letter                         = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
digit                          = "0123456789".
cr                             = '\r'.
lf                             = '\n'.
tab                            = '\t'.
strings                        = CHR(32) .. CHR(255) - '"'.
 
TOKENS
identifier                     = letter {letter | digit | "_"}.
number                         = digit {digit} .
string                         = '"' { strings } '"' .
 
IGNORE cr + lf + tab

PRODUCTIONS
  VeKrestKrest                 = { Defenition } .

  Defenition                   = identifier (. name = self.token.val .) 
                                 Params "->" Type 
                                 (. type = ':' + self.token.val .)
                                 FunctionDefinition<out tree> 
                                 (. 
                                    print(name + type)
                                    tree.PrintChildrens(0);
                                 .).

  Params                       = "(" [ FormalParamList ] ")" .
  FormalParamList              = FormalParameter {"," FormalParameter} .
  FunctionDefinition<out tree> = CompoundStatement<out tree> .
  FormalParameter              = Type [ identifier ] .

  Type                         =   "CELINA"  [ "["ConstExpression"]" ] 
                                 | "BUKVI" 
                                 | "DROB"    [ "["ConstExpression"]" ]
                                 | "PRAVDA"  [ "["ConstExpression"]" ].
  
  Statement<out tree>          = (. tree = Node() .) 
                                 ( AssignmentExpression
                                 | CompoundStatement<out cmpd_tree> (. tree = cmpd_tree .) 
                                 | IfStatement 
                                 | ReturnStatement<out ret_tree> (. tree.Rename("VOZDAT"); tree.AddChild(ret_tree) .) 
                                 | WhileStatement ) .

  CompoundStatement<out tree>  = (. tree = Node() .)
                                 "{" {LocalDeclaration<out declar_tree> (. tree.AddChild(declar_tree) .) } 
                                 {Statement<out stat_tree> (. tree.AddChild(stat_tree) .) } "}" .

  LocalDeclaration<out tree>   = Type identifier (. name = self.token.val; tree = Node(name) .)
                                 ( "(" [ FormalParamList ] ")" (.  .)
                                 | "=" Expression<out expr_tree>    
                                 (.
                                    name += " = "
                                    tree.AddChild(expr_tree)
                                 .) ) ";" .

  ConstExpression              = Expression<out tree> .
  Expression<out tree>         = (. tree = Node() .) 
                                 Conditional<out cond_tree> (. tree.AddChild(cond_tree) .)
                                 { AssignmentOperator<out op> Expression<out expr_tree> 
                                 (. 
                                    tree.AddChild(op)
                                    tree.AddChild(expr_tree) 
                                 .) } .

  ReturnStatement<out tree>    = "VOZDAT"  [ Expression<out tree> ] ";" .
  WhileStatement               = "DOKOLE" "(" Expression<out expr_tree> ")" Statement<out expr_tree> .
  IfStatement                  = "KOLI"   "(" Expression<out expr_tree> ")" Statement<out expr_tree> [ "else" Statement<out expr_tree> ] .
  
  AssignmentExpression         = Expression<out tree> ";" .

  Conditional<out tree>        = LogORExp<out tree>.

  LogORExp<out tree>           = LogANDExp<out tree> { "ALI" LogANDExp<out tree> } .

  LogANDExp<out tree>          = (. tree = Node() .) EqualExp<out eq_tree_1> (. tree.AddChild(eq_tree_1) .)
                                 { "DA" EqualExp<out eq_tree_2> 
                                 (. tree.AddChild(eq_tree_2) .) } .

  EqualExp<out tree>           = (. tree = Node() .) RelationExp<out rel_tree_1> (. tree.AddChild(rel_tree_1) .)
                                 { ( "==" ) RelationExp<out rel_tree_2> (. tree.AddChild(rel_tree_2) .) } .

  RelationExp<out tree>        = (. tree = Node() .) 
                                 AddExp<out sub_tree_1> (. tree.AddChild(sub_tree_1) .)
                                 { ( "<"  (. op  = '<' .)
                                 | ">"  (. op  = '>' .)
                                 | "<=" (. op  = '<=' .)
                                 | ">=" (. op  = '>=' .) ) AddExp<out sub_tree_2> 
                                 (. tree.AddChild(sub_tree_2) .) }.

  AddExp<out tree>             = (. tree = Node() .)
                                 MultExp<out mult_tree_1> (. tree.AddChild(mult_tree_1) .)   
                                 { ( "+" (. op = self.token.val .) 
                                 | "-" (. op = self.token.val .) ) 
                                 MultExp<out mult_tree_2> 
                                 (. 
                                    tree.AddChild(Node(op))
                                    tree.AddChild(mult_tree_1) 
                                 .) } .

  MultExp<out tree>            = (. tree = Node() .) 
                                 CastExp<out cast_tree_1> (. tree.AddChild(cast_tree_1) .)   
                                 { ( "*"  (. op = "*" .) 
                                 | "/"  (. op = "/" .)
                                 | "%"  (. op = "%" .) ) 
                                 CastExp<out cast_tree_2> 
                                 (.
                                    tree.AddChild(Node(op))
                                    tree.AddChild(cast_tree_2) 
                                 .) } .

  CastExp<out tree>            = UnaryExp<out urary_tree> (. tree = urary_tree .) .

  UnaryExp<out tree>           = (. tree = Node() .)
                                 PostFixExp<out s> (. tree = s .)
                                 | UnaryOperator<out op> CastExp<out sub_tree>
                                 (.
                                    tree.AddChild(Node(op))
                                    tree.AddChild(sub_tree) 
                                 .) .

  PostFixExp<out tree>         = (. tree = Node() .) 
                                 Primary<out child> (. tree.AddChild(child); .)
                                 { "[" Expression<out expression_tree> "]" (. tree.AddChild(expression_tree) .)
                                 | FunctionCall<out params_tree>           (. tree.AddChild(params_tree) .) }.

  Primary<out prim>            = identifier   (. prim = Node(self.token.val) .) 
                                 | string     (. prim = Node(self.token.val) .) 
                                 | number     (. prim = Node(self.token.val) .) 
                                 | "(" Expression<out tree> ")" 
                                 (. 
                                    prim = Node("()") 
                                    prim.AddChild(tree) 
                                 .) .

  FunctionCall<out res>        = (. res = Node(self.token.val) .)
                                 "(" [ ActualParameters<out expr> (. res.AddChild(expr).) ] ")" .

  ActualParameters<out tree>   = (. tree = Node() .) 
                                 Expression<out expr> (. tree.AddChild(expr) .) 
                                 { "," Expression<out expr2> (. tree.AddChild(expr2) .) } .

  AssignmentOperator<out op>   =    "=" (. op = self.token.val .) 
                                 | "*=" (. op = self.token.val .)
                                 | "/=" (. op = self.token.val .)
                                 | "%=" (. op = self.token.val .)
                                 | "+=" (. op = self.token.val .) .

  UnaryOperator<out op>        =   "+"  (. op = self.token.val .) 
                                 | "-"  (. op = self.token.val .) 
                                 | "*"  (. op = self.token.val .) 
                                 | "NE" (. op = self.token.val .) .

END VeKrestKrest.
